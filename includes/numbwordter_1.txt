<?php
/*
**  Function:   convert_number
**  Arguments:  int
**  Returns:    string
**  Description:
**      Converts a given integer (in range [0..1T-1], inclusive) into
**      alphabetical format ("one", "two", etc.).
*/
function convert_number($number)
{
    if (($number < 0) || ($number > 999999999))
    {
        return "$number";
    }

    $Gn = floor($number / 1000000);  /* Millions (giga) */
    $number -= $Gn * 1000000;
    $kn = floor($number / 1000);     /* Thousands (kilo) */
    $number -= $kn * 1000;
    $Hn = floor($number / 100);      /* Hundreds (hecto) */
    $number -= $Hn * 100;
    $Dn = floor($number / 10);       /* Tens (deca) */
    $n = $number % 10;               /* Ones */

    $res = "";

    if ($Gn)
    {
        $res .= convert_number($Gn) . " Million";
    }

    if ($kn)
    {
        $res .= (empty($res) ? "" : " ") .
            convert_number($kn) . " Thousand";
    }

    if ($Hn)
    {
        $res .= (empty($res) ? "" : " ") .
            convert_number($Hn) . " Hundred";
    }

    $ones = array("", "One", "Two", "Three", "Four", "Five", "Six",
        "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen",
        "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eightteen",
        "Nineteen");
    $tens = array("", "", "Twenty", "Thirty", "Fourty", "Fifty", "Sixty",
        "Seventy", "Eigthy", "Ninety");

    if ($Dn || $n)
    {
        if (!empty($res))
        {
            $res .= " and ";
        }

        if ($Dn < 2)
        {
            $res .= $ones[$Dn * 10 + $n];
        }
        else
        {
            $res .= $tens[$Dn];

            if ($n)
            {
                $res .= "-" . $ones[$n];
            }
        }
    }

    if (empty($res))
    {
        $res = "zero";
    }

    return $res;
}

?>
<?php

// The purpose of this class is to convert numbers to word
// Extra features include: addition currency units / values - optional
// The thousand separator is limited to zillion, 
// additional word can be used if know 
// 
// echo number_word("3,452,455.00", "Dollar", "Cent");
// 
// femi.fapohunda@gmail.com +234 803 977 4040

class number_word {
	
	// array of possible numbers => words
	private $word_array = array(1=>"One",2=>"Two",3=>"Three",4=>"Four",5=>"Five",6=>"Six",7=>"Seven",8=>"Eight",9=>"Nine",10=>"Ten",11=>"Eleven",12=>"Twelve",13=>"Thirteen",14=>"Fourteen",15=>"Fifteen",16=>"Sixteen",17=>"Seventeen",18=>"Eighteen",19=>"Nineteen",20=>"Twenty",21=>"Twenty-One",22=>"Twenty-Two",23=>"Twenty-Three",24=>"Twenty-Four",25=>"Twenty-Five",26=>"Twenty-Six",27=>"Twenty-Seven",28=>"Twenty-Eight",29=>"Twenty-Nine",30=>"Thirty",31=>"Thirty-One",32=>"Thirty-Two",33=>"Thirty-Three",34=>"Thirty-Four",35=>"Thirty-Five",36=>"Thirty-Six",37=>"Thirty-Seven",38=>"Thirty-Eight",39=>"Thirty-Nine",40=>"Forty",41=>"Forty-One",42=>"Forty-Two",43=>"Forty-Three",44=>"Forty-Four",45=>"Forty-Five",46=>"Forty-Six",47=>"Forty-Seven",48=>"Forty-Eight",49=>"Forty-Nine",50=>"Fifty",51=>"Fifty-One",52=>"Fifty-Two",53=>"Fifty-Three",54=>"Fifty-Four",55=>"Fifty-Five",56=>"Fifty-Six",57=>"Fifty-Seven",58=>"Fifty-Eight",59=>"Fifty-Nine",60=>"Sixty",61=>"Sixty-One",62=>"Sixty-Two",63=>"Sixty-Three",64=>"Sixty-Four",65=>"Sixty-Five",66=>"Sixty-Six",67=>"Sixty-Seven",68=>"Sixty-Eight",69=>"Sixty-Nine",70=>"Seventy",71=>"Seventy-One",72=>"Seventy-Two",73=>"Seventy-Three",74=>"Seventy-Four",75=>"Seventy-Five",76=>"Seventy-Six",77=>"Seventy-Seven",78=>"Seventy-Eight",79=>"Seventy-Nine",80=>"Eighty",81=>"Eighty-One",82=>"Eighty-Two",83=>"Eighty-Three",84=>"Eighty-Four",85=>"Eighty-Five",86=>"Eighty-Six",87=>"Eighty-Seven",88=>"Eighty-Eight",89=>"Eighty-Nine",90=>"Ninety",91=>"Ninety-One",92=>"Ninety-Two",93=>"Ninety-Three",94=>"Ninety-Four",95=>"Ninety-Five",96=>"Ninety-Six",97=>"Ninety-Seven",98=>"Ninety-Eight",99=>"Ninety-Nine",100=>"One Hundred",200=>"Two Hundred",300=>"Three Hundred",400=>"Four Hundred",500=>"Five Hundred",600=>"Six Hundred",700=>"Seven Hundred",800=>"Eight Hundred",900=>"Nine Hundred");
			
	// thousand array, 
	private $thousand = array("", "Thousand, ", "Million, ", "Billion, ", "Trillion, ", "Zillion, ");
	
	// variables
	private $val, $currency0, $currency1;	
	private $val_array, $dec_value, $dec_word, $num_value, $num_word;
	var $val_word;

	public function number_word($in_val = 0, $in_currency0 = "", $in_currency1 = "") {
		
		$this->val = $in_val;
		$this->currency0 = $in_currency0;
		$this->currency1 = $in_currency1;
		
		// remove commas from comma separated numbers
		$this->val = abs(floatval(str_replace(",","",$this->val)));
		
		if ($this->val > 0) {
		
			// convert to number format
			$this->val = number_format($this->val, '2', ',', ',');
			
			// split to array of 3(s) digits and 2 digit
			$this->val_array = explode(",", $this->val);
			
			// separate decimal digit
			$this->dec_value = intval($this->val_array[count($this->val_array) - 1]);
			
			if ($this->dec_value > 0) {
				
				// convert decimal part to word;
				$this->dec_word = $this->word_array[$this->dec_value]." ".$this->currency1;
			}
			
			// loop through all 3(s) digits in VAL array
			$t = 0;
			
			// initialize the number to word variable
			$this->num_word = "";
			
			for ($i = count($this->val_array) - 2; $i >= 0; $i--) {
				
				// separate each element in VAL array to 1 and 2 digits
				$this->num_value = intval($this->val_array[$i]);
				
				// if VAL = 0 then no word
				if ($this->num_value == 0) {
					$this->num_word = "".$this->num_word;
				} 
				
				// if 0 < VAL < 100 or 2 digits
				elseif (strlen($this->num_value."") <= 2) {
					$this->num_word = $this->word_array[$this->num_value]." ".$this->thousand[$t].$this->num_word;
					
					// add 'and' if not last element in VAL
					if ($i == 1) {
						$this->num_word = " and ".$this->num_word;
					}				
				} 
				
				// if VAL >= 100, set the hundred word
				else {
					$this->num_word = $this->word_array[substr($this->num_value, 0, 1)."00"]. (intval(substr($this->num_value, 1, 2)) > 0 ? " and " : "") .$this->word_array[intval(substr($this->num_value, 1, 2))]." ".$this->thousand[$t].$this->num_word;
				}
				$t++;
			}		
			
			// add currency to word
			if (!empty($this->num_word)) {
				$this->num_word .= " ".$this->currency0;
			}
		}
		
		// join the number and decimal words
		$this->val_word = $this->num_word." ".$this->dec_word;
	}
}
?>
<?php 
//-----------------------------------------------------------
//     NumbWordter - Number to Word converter class in PHP
//   Written by Manda Krishna Srikanth (krishnasrikanth.com)
//-----------------------------------------------------------
class NumbWordter
{
	private $discrete=array('0'=>'zero','1'=>'one','2'=>'two','3'=>"three",'4'=>"four",'5'=>"five",'6'=>'six','7'=>'seven',
	'8'=>'eight','9'=>'nine','10'=>'ten','11'=>'eleven',"12"=>'twelve','13'=>'thirteen','14'=>'fourteen',
	'15'=>'fifteen','16'=>'sixteen','17'=>'seventeen','18'=>'eighteen','19'=>'nineteen','-'=>'minus');
	
	private $ten_digit_prefix=array('2'=>'twenty','3'=>'thirty','4'=>'forty','5'=>'fifty','6'=>'sixty',
	'7'=>'seventy','8'=>'eighty','9'=>'ninty');
	
	private $mool_array=array('',"thousand,","million,","billion,","trillion,","quadrillion,","quintillion,","sextillion,",
	"septillion,","octillion,","nonillion,","decillion,","unidecillion,","duodecillion,","tredecillion,","quattuordecillion,");

	private $sentence; //final sentence
	private $error; //error if generated

	//methods
	private function twodigits($num)
	{
		//displays from 1 to 99
		if($num<20)
			return $this->discrete[$num];
		else
			return $this->ten_digit_prefix[substr($num,0,1)].' '.$this->discrete[substr($num,1,1)];
	}
	
	//displays three digit numbers
	private function threedigits($num)
	{
		return $this->discrete[substr($num,0,1)].' hundred and '.$this->twodigits(substr($num,1,2));
	}
	
	private function decider($num)
	{
		if(strlen($num)<=2)
			return $this->twodigits($num);
		else
			return $this->threedigits($num);
	}
	
	public function convert($num)
	{
		//return if more than 48 digits
		if(strlen($num)>48) 
		{
			$this->error="Number out of bounds";
			return $this->error;
		}
		
		//check if first 
		if(substr($num,0,1)=="-")
		{
			$this->sentence.='minus ';
			$num=substr($num,1,strlen($num)-1);
		}
		
		if(strlen($num)<=3)
		{
			$this->sentence.=$this->decider($num);
		}
		else
		{
			$k=strrev($num);
			for($i=0;$i<strlen($k);$i=$i+3){$arro[]=strrev(substr($k,$i,3));}
			//reverse again
			$arro=array_reverse($arro);
			//print_r($arro);
			$mool=ceil(strlen($num)/3);
			if((strlen(num)%3)==0){$mool--;}
			$this->sentence.=$this->decider($arro[0]).' '.$this->mool_array[$mool];
			$mool--;
			//leave the first one and prepare string of others
			$arrlen=count($arro);
			for($i=1;$i<$arrlen;$i++)
			{
				$this->sentence.=' '.$this->decider($arro[$i]);
				if($mool!=0)
				{
					$this->sentence=' '.$this->sentence.' '.$this->mool_array[$mool];
				}
				$mool--;
			}
		}
		return ucfirst(trim($this->sentence));
	}
}
?>
<?php // format money to have the comma per thousands
/*
echo formatMoney(1050); # 1,050
echo formatMoney(1321435.4, true); # 1,321,435.40
echo formatMoney(10059240.42941, true); # 10,059,240.43
echo formatMoney(13245); # 13,245
*/
function formatMoney($number, $fractional=false) {
    if ($fractional) {
        $number = sprintf('%.2f', $number);
    }
    while (true) {
        $replaced = preg_replace('/(-?\d+)(\d\d\d)/', '$1,$2', $number);
        if ($replaced != $number) {
            $number = $replaced;
        } else {
            break;
        }
    }
    return $number;
}
?>

<?php
function leading_zero( $aNumber, $intPart, $floatPart=NULL, $dec_point=NULL, $thousands_sep=NULL) { 
//Note: The $thousands_sep has no real function because it will be "disturbed" by plain leading zeros -> the main goal of the function
 $formattedNumber = $aNumber;
 if (!is_null($floatPart)) { //without 3rd parameters the "float part" of the float shouldn't be touched
   $formattedNumber = number_format($formattedNumber, $floatPart, $dec_point, $thousands_sep);
   }
 //if ($intPart > floor(log10($formattedNumber)))
   $formattedNumber = str_repeat("0",($intPart + -1 - floor(log10($formattedNumber)))).$formattedNumber;
 return $formattedNumber;
 }

//echo leading_zero(21.12345678, 6, 5); 

?>